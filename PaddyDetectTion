import os
import cv2
from inference_sdk import InferenceHTTPClient

# Initialize the inference client
CLIENT = InferenceHTTPClient(
    api_url="https://detect.roboflow.com",
    api_key="f8MrbhG6kcNZsvmZmRnD"
)

def draw_detections(image_path, detections, output_folder):
    """
    Draw detections on the image and save it.

    Args:
        image_path (str): Path to the input image.
        detections (list): List of detection results from the inference API.
        output_folder (str): Folder to save the processed image.
    """
    image = cv2.imread(image_path)
    if image is None:
        print(f"Error: Could not read image {image_path}")
        return

    for detection in detections:
        # Get detection details
        x, y, width, height = detection["x"], detection["y"], detection["width"], detection["height"]
        label = detection["class"]
        confidence = detection["confidence"]

        # Calculate bounding box coordinates
        x_min = int(x - width / 2)
        y_min = int(y - height / 2)
        x_max = int(x + width / 2)
        y_max = int(y + height / 2)

        # Draw the bounding box
        color = (0, 255, 0)  # Green for bounding box
        cv2.rectangle(image, (x_min, y_min), (x_max, y_max), color, 2)

        # Add label and confidence
        text = f"{label} ({confidence:.2f})"
        cv2.putText(image, text, (x_min, y_min - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

    # Save the image
    os.makedirs(output_folder, exist_ok=True)
    output_path = os.path.join(output_folder, os.path.basename(image_path))
    cv2.imwrite(output_path, image)
    print(f"Saved processed image to {output_path}")

def test_dataset(image_folder, model_id, output_folder):
    """
    Test images in a dataset folder using the inference API.

    Args:
        image_folder (str): Path to the folder containing test images.
        model_id (str): The model ID to use for inference.
        output_folder (str): Folder to save processed images.
    """
    if not os.path.exists(image_folder):
        print(f"Error: The folder '{image_folder}' does not exist.")
        return

    image_files = [f for f in os.listdir(image_folder) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

    if not image_files:
        print(f"No image files found in the folder '{image_folder}'.")
        return

    print(f"Found {len(image_files)} images in '{image_folder}'. Starting inference...")

    for idx, image_file in enumerate(image_files, start=1):
        image_path = os.path.join(image_folder, image_file)
        try:
            # Send the image for inference
            print(f"[{idx}/{len(image_files)}] Processing {image_file}...")
            result = CLIENT.infer(image_path, model_id=model_id)

            # Extract detections
            predictions = result.get("predictions", [])
            if not predictions:
                print(f"No detections for {image_file}")
                continue

            # Draw detections and save the image
            draw_detections(image_path, predictions, output_folder)
        except Exception as e:
            print(f"Error processing {image_file}: {e}")

if __name__ == "__main__":
    # Get the directory of the current script
    SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

    # Specify the folder containing images, model ID, and output folder
    IMAGE_FOLDER = "C:/AgiCode/Datasets/Rice  crop Identification.v2i.yolov5pytorch/train/images"
    MODEL_ID = "rice-crop-identification/1"
    OUTPUT_FOLDER = os.path.join(SCRIPT_DIR, "output")  # Create 'output' folder in the script directory

    test_dataset(IMAGE_FOLDER, MODEL_ID, OUTPUT_FOLDER)
